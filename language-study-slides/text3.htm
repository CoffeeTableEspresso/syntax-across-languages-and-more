<html>
<head>
<title>Slide 4</title>
</head>
<body text=#FFFFFF bgcolor=#C3C3C3 link=#000080 vlink=#800000 alink=#000080>
<center>
<a href="text0.htm">First page</a> <a href="text2.htm">Back</a> <a href="text4.htm">Continue</a> <a href="text28.htm">Last page</a> <a href="index.htm">Summary</a> <a href="img3.htm">Graphics</a></center><br>
<h1><b><font color=#666699>Types and values (2)</b></font></h1><p>
<ul><li><h2>User defined:</h2>
<ul><li>structs: point = { x: int; y: int }
<li>enums, ranges: bool = { false, true }
<li>datatypes: tree(a) = leaf(a) | node(tree(a),tree(a))
</ul><li><h2>Subtyping</h2>
<ul><li>3dpoint = { x: int; y: int; z: int }
<li>can be used when a point (see above) is expected
</ul><li><h2>Abstract types</h2>
</ul><br>
<h3>Notes:</h3>
<font color=#000000>Current trend: simplification/unification of low-level types:</font><br>
<font color=#000000>Perl blurs int/double</font><br>
<font color=#000000>Scheme &amp; Ruby blurs int/bigint</font><br>
<font color=#000000>Name vs structural equivalence is less a problem when mostly everything is abstract</font><br>
<font color=#000000>History:</font><br>
<font color=#000000>Records: Cobol (already instanciated)</font><br>
<font color=#000000>Lists: Lisp</font><br>
<font color=#000000>Pointers: PL/I</font><br>
<font color=#000000>User defined: Algol 68</font><br>
<font color=#000000>Abstract types: Simula 67</font><br>
</body>
</html>