
class Food {
    constructor(public energy: number) {}

    eaten() {
        return this.energy
    }
}

class Meat extends Food {
    valid: boolean = true

    eaten() {
        if (!this.valid) throw "meat is already eaten"
        this.valid = false
        return super.eaten()
      }
}

class Animal<Slaughtered extends Meat, Food_accepted extends Food> {
    valid: boolean = true

    constructor(
        public energy: number,
        public when_slaughtered: { new(energy): Slaughtered }
    ) {}

    eat(food: Food_accepted) {
        if (!this.valid) throw "animal is dead, it can't eat"
        this.energy += food.eaten()
    }

    slaughter(): Slaughtered {
        if (!this.valid) throw "animal is dead, it can't be slaughtered again"
        this.valid = false
        return new this.when_slaughtered(this.energy)
    }

    get name() {
      return this.constructor['name']
    }
}

// because typescript is doing structural subtyping, one need to add something to differentiate types below:
class Beef extends Meat { t_Beef }
class DeadRabbit extends Meat { t_DeadRabbit }
class DeadHuman extends Meat { t_DeadHuman }
class Grass extends Food { t_Grass }
class Carrot extends Food { t_Carrot }

class Cow extends Animal<Beef, Grass> {
  constructor(energy) { super(energy, Beef) }
}
class Rabbit extends Animal<DeadRabbit, Carrot> {
  constructor(energy) { super(energy, DeadRabbit) }
}
class Human extends Animal<DeadHuman, Carrot | Meat> {
  constructor(energy) { super(energy, DeadHuman) }
}

const grass    = new Grass(5)
const carrot   = new Carrot(10)

let a_rabbit      = new Rabbit(100)
let a_cow         = new Cow(1000)
let a_human       = new Human(300)
let another_human = new Human(350)

for (let o of [ a_rabbit, a_cow, a_human ]) {
    console.log(o.name + ' -> ' + o.energy)
}

a_rabbit.eat(carrot)
a_cow.eat(grass)

let a_dead_rabbit = a_rabbit.slaughter()
let a_beef = a_cow.slaughter()

a_human.eat(carrot)
a_human.eat(carrot)
a_human.eat(a_beef)
a_human.eat(a_dead_rabbit)

a_human.eat(another_human.slaughter())

if (a_human.energy != 1785) throw "failed"

// detected at compile-time:
//new_cow(10).slaughter().eat(grass) // meat (food) can't eat
//new_cow(10).slaughter().slaughter() // meat (food) can't be slaughtered
//carrot.eat(grass)      // vegetable (food) can't eat
//carrot.slaughter()     // vegetable (food) can't be slaughtered
//new Cow(10).eat(carrot) // cow do not eat carrot
//new Cow(10).eat(new Cow(10).slaughter()) // cow do not eat beef
//a_human.eat(new  Cow(10)) // can't eat live animals
//a_human.eat(grass)     // human do not eat grass

const should_fail = `
a_human.eat(a_beef)    // a_beef is already eaten
a_cow.eat(grass)       // a_cow is dead, it can't eat
a_cow.slaughter()      // a_cow is dead, it can't be slaughtered again
`

for (let t of should_fail.split("\n").filter(t => t !== '')) {
    try {
        eval(t)
        throw t + " should_have_failed"
    } catch (e) {
        //console.log("correctly failed: " + t + "\n", e)
    }
}
